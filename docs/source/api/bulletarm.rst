.. automodule:: bulletarm
  :no-members:

.. |check| unicode:: U+2611 .. CHECKMARK 
.. |nocheck| unicode:: U+2610 .. NO_CHECKMARK 

bulletarm
==========

This is the main package for the BulletArm library. It contains the PyBullet simulation environments, robots, and task definitions.
The simulation workspace consists of a robot arm mounted on the floor of the simulation environment, a workspace where objects are 
generated, and sensor(s). There are three key terms within BulletArm: *Enviornment*, *Configuration*, and *Episode*. An *environment*
is an instance ofthe PyBullet simulator in which the robot interacts with objects while trying to solve some task. This include the 
initial environment state, the reward function, and termination requirements. A *configuration* contains additional specifications
for the task such as the robot arm, the size of the workspace, the physics mode, etc. A full list of parameters can be found here.
*Episodes* are generated by taking actions (steps) within an environment until the episode ends.

.. figure:: ../images/workspace.png
  :figwidth: 400px
  :align: center
  
  The simulation environment containing a robot arm, a camera, and a workspace.

Tasks
-----------------
Our set of tasks are seperated into two categories based on the action space: open-loop control and closed-loop control.
Future work is planned to allow all tasks to use either control-type but for now the below table shows current avaliable
control type for each task.

.. list-table::
  :widths: 25 25 25
  :header-rows: 1
  :align: center

  * - Task
    - Open-Loop Control
    - Closed-Loop Control
  * - :ref:`Block Reaching` 
    - |nocheck| 
    - |check| 
  * - :ref:`Block Pushing` 
    - |nocheck| 
    - |check| 
  * - :ref:`Block Pulling` 
    - |nocheck| 
    - |check| 
  * - :ref:`Block Picking` 
    - |check| 
    - |check| 
  * - :ref:`Block Stacking` 
    - |check| 
    - |check| 
  * - :ref:`Block In Bowl` 
    - |nocheck| 
    - |check| 
  * - :ref:`House Building 1` 
    - |check| 
    - |check| 
  * - :ref:`House Building 2` 
    - |check| 
    - |nocheck| 
  * - :ref:`House Building 3` 
    - |check| 
    - |nocheck| 
  * - :ref:`House Building 4` 
    - |check| 
    - |nocheck| 
  * - :ref:`Improvise House Building 2` 
    - |check| 
    - |nocheck| 
  * - :ref:`Improvise House Building 3` 
    - |check| 
    - |nocheck| 
  * - :ref:`Bin Packing` 
    - |check| 
    - |nocheck| 
  * - :ref:`Bottle Arrangement` 
    - |check| 
    - |nocheck| 
  * - :ref:`Box Palletizing` 
    - |check| 
    - |nocheck| 
  * - :ref:`Covid Test`
    - |check| 
    - |nocheck| 
  * - :ref:`Corner Picking`
    - |nocheck| 
    - |check| 
  * - :ref:`Drawer Opening`
    - |nocheck| 
    - |check| 
  * - :ref:`Object Grasping`
    - |check| 
    - |check| 

EnvFactory & EnvRunner
-----------------------
Interaction with BulletArm is done through the *EnvFactory* and *EnvRunner* classes. 
The *EnvFactory* is the entry point and creates the *environment* specified by the *configuration* passed as input. The *EnvFactory*
can create either a single environment (SingleRunner) or multiple environments (MultiRunner) to be run in parallel.
The *EnvRunner* provides the API which interacts with the environment. This API is modeled after the typical agent-environment
RL setup popularized by OpenAI Gym.

EnvFactory
~~~~~~~~~~~

.. automodule:: bulletarm.env_factory
  :members:

EnvRunner
~~~~~~~~~~
.. autoclass:: bulletarm.runner.MultiRunner
  :members:

.. autoclass:: bulletarm.runner.SingleRunner
  :members:

Robots
-----------
Different robotic arms can lead to drastically different policies due to the differing kinematics between arms. We
provide four robotic arms: KUKA IIWA, Frane Emika Panda, Universal Robots UR5 with a parallel jaw gripper, and 
Universal Robots UR5 with Robotiq 2F-85 gripper. To add a new manipulator see the `tutorial <https://github.com/ColinKohler/BulletArm/blob/main/tutorials/new_robot.py>`_. 

.. figure:: ../images/robots.png
  :figwidth: 600px
  :align: center
  
  Currently supported robotic arms.
